module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateImage {
  count: Int!
}

type AggregateLife {
  count: Int!
}

type AggregateStory {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVideo {
  count: Int!
}

type AggregateWorship {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Image {
  id: ID!
  name: String!
  path: String!
  file: Json!
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  name: String!
  path: String!
  file: Json!
}

type ImageEdge {
  node: Image!
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  path_ASC
  path_DESC
  file_ASC
  file_DESC
}

type ImagePreviousValues {
  id: ID!
  name: String!
  path: String!
  file: Json!
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
  AND: [ImageSubscriptionWhereInput!]
  OR: [ImageSubscriptionWhereInput!]
  NOT: [ImageSubscriptionWhereInput!]
}

input ImageUpdateInput {
  name: String
  path: String
  file: Json
}

input ImageUpdateManyMutationInput {
  name: String
  path: String
  file: Json
}

input ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
}

input ImageWhereUniqueInput {
  id: ID
}

scalar Json

type Life {
  id: ID!
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type LifeConnection {
  pageInfo: PageInfo!
  edges: [LifeEdge]!
  aggregate: AggregateLife!
}

input LifeCreateInput {
  id: ID
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type LifeEdge {
  node: Life!
  cursor: String!
}

enum LifeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  file_ASC
  file_DESC
  createAt_ASC
  createAt_DESC
}

type LifePreviousValues {
  id: ID!
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type LifeSubscriptionPayload {
  mutation: MutationType!
  node: Life
  updatedFields: [String!]
  previousValues: LifePreviousValues
}

input LifeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LifeWhereInput
  AND: [LifeSubscriptionWhereInput!]
  OR: [LifeSubscriptionWhereInput!]
  NOT: [LifeSubscriptionWhereInput!]
}

input LifeUpdateInput {
  title: String
  content: String
  file: Json
  createAt: String
}

input LifeUpdateManyMutationInput {
  title: String
  content: String
  file: Json
  createAt: String
}

input LifeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createAt: String
  createAt_not: String
  createAt_in: [String!]
  createAt_not_in: [String!]
  createAt_lt: String
  createAt_lte: String
  createAt_gt: String
  createAt_gte: String
  createAt_contains: String
  createAt_not_contains: String
  createAt_starts_with: String
  createAt_not_starts_with: String
  createAt_ends_with: String
  createAt_not_ends_with: String
  AND: [LifeWhereInput!]
  OR: [LifeWhereInput!]
  NOT: [LifeWhereInput!]
}

input LifeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  createLife(data: LifeCreateInput!): Life!
  updateLife(data: LifeUpdateInput!, where: LifeWhereUniqueInput!): Life
  updateManyLives(data: LifeUpdateManyMutationInput!, where: LifeWhereInput): BatchPayload!
  upsertLife(where: LifeWhereUniqueInput!, create: LifeCreateInput!, update: LifeUpdateInput!): Life!
  deleteLife(where: LifeWhereUniqueInput!): Life
  deleteManyLives(where: LifeWhereInput): BatchPayload!
  createStory(data: StoryCreateInput!): Story!
  updateStory(data: StoryUpdateInput!, where: StoryWhereUniqueInput!): Story
  updateManyStories(data: StoryUpdateManyMutationInput!, where: StoryWhereInput): BatchPayload!
  upsertStory(where: StoryWhereUniqueInput!, create: StoryCreateInput!, update: StoryUpdateInput!): Story!
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteManyStories(where: StoryWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVideo(data: VideoCreateInput!): Video!
  updateVideo(data: VideoUpdateInput!, where: VideoWhereUniqueInput!): Video
  updateManyVideos(data: VideoUpdateManyMutationInput!, where: VideoWhereInput): BatchPayload!
  upsertVideo(where: VideoWhereUniqueInput!, create: VideoCreateInput!, update: VideoUpdateInput!): Video!
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteManyVideos(where: VideoWhereInput): BatchPayload!
  createWorship(data: WorshipCreateInput!): Worship!
  updateWorship(data: WorshipUpdateInput!, where: WorshipWhereUniqueInput!): Worship
  updateManyWorships(data: WorshipUpdateManyMutationInput!, where: WorshipWhereInput): BatchPayload!
  upsertWorship(where: WorshipWhereUniqueInput!, create: WorshipCreateInput!, update: WorshipUpdateInput!): Worship!
  deleteWorship(where: WorshipWhereUniqueInput!): Worship
  deleteManyWorships(where: WorshipWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  life(where: LifeWhereUniqueInput!): Life
  lives(where: LifeWhereInput, orderBy: LifeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Life]!
  livesConnection(where: LifeWhereInput, orderBy: LifeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LifeConnection!
  story(where: StoryWhereUniqueInput!): Story
  stories(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Story]!
  storiesConnection(where: StoryWhereInput, orderBy: StoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoryConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  video(where: VideoWhereUniqueInput!): Video
  videos(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Video]!
  videosConnection(where: VideoWhereInput, orderBy: VideoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VideoConnection!
  worship(where: WorshipWhereUniqueInput!): Worship
  worships(where: WorshipWhereInput, orderBy: WorshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Worship]!
  worshipsConnection(where: WorshipWhereInput, orderBy: WorshipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorshipConnection!
  node(id: ID!): Node
}

type Story {
  id: ID!
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type StoryConnection {
  pageInfo: PageInfo!
  edges: [StoryEdge]!
  aggregate: AggregateStory!
}

input StoryCreateInput {
  id: ID
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type StoryEdge {
  node: Story!
  cursor: String!
}

enum StoryOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  file_ASC
  file_DESC
  createAt_ASC
  createAt_DESC
}

type StoryPreviousValues {
  id: ID!
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type StorySubscriptionPayload {
  mutation: MutationType!
  node: Story
  updatedFields: [String!]
  previousValues: StoryPreviousValues
}

input StorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StoryWhereInput
  AND: [StorySubscriptionWhereInput!]
  OR: [StorySubscriptionWhereInput!]
  NOT: [StorySubscriptionWhereInput!]
}

input StoryUpdateInput {
  title: String
  content: String
  file: Json
  createAt: String
}

input StoryUpdateManyMutationInput {
  title: String
  content: String
  file: Json
  createAt: String
}

input StoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createAt: String
  createAt_not: String
  createAt_in: [String!]
  createAt_not_in: [String!]
  createAt_lt: String
  createAt_lte: String
  createAt_gt: String
  createAt_gte: String
  createAt_contains: String
  createAt_not_contains: String
  createAt_starts_with: String
  createAt_not_starts_with: String
  createAt_ends_with: String
  createAt_not_ends_with: String
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
}

input StoryWhereUniqueInput {
  id: ID
}

type Subscription {
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  life(where: LifeSubscriptionWhereInput): LifeSubscriptionPayload
  story(where: StorySubscriptionWhereInput): StorySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  video(where: VideoSubscriptionWhereInput): VideoSubscriptionPayload
  worship(where: WorshipSubscriptionWhereInput): WorshipSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}

type Video {
  id: ID!
  title: String!
  path: String!
  file: Json!
}

type VideoConnection {
  pageInfo: PageInfo!
  edges: [VideoEdge]!
  aggregate: AggregateVideo!
}

input VideoCreateInput {
  id: ID
  title: String!
  path: String!
  file: Json!
}

type VideoEdge {
  node: Video!
  cursor: String!
}

enum VideoOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  path_ASC
  path_DESC
  file_ASC
  file_DESC
}

type VideoPreviousValues {
  id: ID!
  title: String!
  path: String!
  file: Json!
}

type VideoSubscriptionPayload {
  mutation: MutationType!
  node: Video
  updatedFields: [String!]
  previousValues: VideoPreviousValues
}

input VideoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VideoWhereInput
  AND: [VideoSubscriptionWhereInput!]
  OR: [VideoSubscriptionWhereInput!]
  NOT: [VideoSubscriptionWhereInput!]
}

input VideoUpdateInput {
  title: String
  path: String
  file: Json
}

input VideoUpdateManyMutationInput {
  title: String
  path: String
  file: Json
}

input VideoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
}

input VideoWhereUniqueInput {
  id: ID
}

type Worship {
  id: ID!
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type WorshipConnection {
  pageInfo: PageInfo!
  edges: [WorshipEdge]!
  aggregate: AggregateWorship!
}

input WorshipCreateInput {
  id: ID
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type WorshipEdge {
  node: Worship!
  cursor: String!
}

enum WorshipOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  file_ASC
  file_DESC
  createAt_ASC
  createAt_DESC
}

type WorshipPreviousValues {
  id: ID!
  title: String!
  content: String!
  file: Json!
  createAt: String!
}

type WorshipSubscriptionPayload {
  mutation: MutationType!
  node: Worship
  updatedFields: [String!]
  previousValues: WorshipPreviousValues
}

input WorshipSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorshipWhereInput
  AND: [WorshipSubscriptionWhereInput!]
  OR: [WorshipSubscriptionWhereInput!]
  NOT: [WorshipSubscriptionWhereInput!]
}

input WorshipUpdateInput {
  title: String
  content: String
  file: Json
  createAt: String
}

input WorshipUpdateManyMutationInput {
  title: String
  content: String
  file: Json
  createAt: String
}

input WorshipWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createAt: String
  createAt_not: String
  createAt_in: [String!]
  createAt_not_in: [String!]
  createAt_lt: String
  createAt_lte: String
  createAt_gt: String
  createAt_gte: String
  createAt_contains: String
  createAt_not_contains: String
  createAt_starts_with: String
  createAt_not_starts_with: String
  createAt_ends_with: String
  createAt_not_ends_with: String
  AND: [WorshipWhereInput!]
  OR: [WorshipWhereInput!]
  NOT: [WorshipWhereInput!]
}

input WorshipWhereUniqueInput {
  id: ID
}
`
      }
    